repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenLocal()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
    ext{
        //dependencies
        grpcVersion = '1.18.0'
        protobufVersion = '3.6.1'
        protocVersion = '3.6.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
//def grpcVersion = '1.18.0'
//def protobufVersion = '3.6.1'
//def protocVersion = '3.6.1'

dependencies {
    // https://mvnrepository.com/artifact/com.google.api.grpc/proto-google-common-protos
    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.12.0'
    // https://mvnrepository.com/artifact/io.grpc/grpc-protobuf
    compile group: 'io.grpc', name: 'grpc-protobuf', version: "${grpcVersion}"
    // https://mvnrepository.com/artifact/io.grpc/grpc-stub
    compile group: 'io.grpc', name: 'grpc-stub', version: "${grpcVersion}"
    // https://mvnrepository.com/artifact/io.grpc/grpc-netty-shaded
    compile group: 'io.grpc', name: 'grpc-netty-shaded', version: "${grpcVersion}"
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    // https://mvnrepository.com/artifact/com.google.flogger/flogger
    compile group: 'com.google.flogger', name: 'flogger', version: '0.3.1'
    // https://mvnrepository.com/artifact/com.google.flogger/flogger-system-backend
    runtime group: 'com.google.flogger', name: 'flogger-system-backend', version: '0.3.1'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
    // https://mvnrepository.com/artifact/com.google.inject/guice
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    // https://mvnrepository.com/artifact/com.drewnoakes/metadata-extractor
    compile group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.11.0'


    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

// Generate IntelliJ IDEA's .idea & .iml project files
apply plugin: 'idea'

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

task photoStatServer(type: CreateStartScripts) {
    mainClassName = 'org.kai.photostat.service.PhotoStatServiceRunner'
    applicationName = 'photo-stat-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task photoStatClient(type: CreateStartScripts) {
    mainClassName = 'org.kai.photostat.client.PhotoStatClient'
    applicationName = 'photo-stat-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}


applicationDistribution.into('bin') {
    from(photoStatServer)
    from(photoStatClient)
    fileMode = 0755
}
